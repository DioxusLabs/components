.toast-container {
  position: fixed;
  z-index: 9999;
  right: 20px;
  bottom: 20px;
  display: flex;
  max-width: 350px;
  flex-direction: column-reverse;
  gap: 0.75rem;
}

.toast {
  z-index: calc(var(--toast-count) - var(--toast-index));
  display: flex;
  overflow: hidden;
  width: 18rem;
  height: 4rem;
  box-sizing: border-box;
  align-items: center;
  justify-content: space-between;
  padding: 12px 16px;
  border: 1px solid var(--light, var(--dim-border-color))
    var(--dark, var(--hover-border-color));
  border-radius: 0.5rem;
  margin-top: -4rem;
  box-shadow: 0 4px 12px rgb(0 0 0 / 15%);
  filter: var(--light, none)
    var(
      --dark,
      brightness(calc(0.5 + 0.5 * (1 - ((var(--toast-index) + 1) / 4))))
    );
  opacity: calc(1 - var(--toast-hidden));
  transform: scale(
    calc(100% - var(--toast-index) * 5%),
    calc(100% - var(--toast-index) * 2%)
  );
  transition: transform 0.2s ease, margin-top 0.2s ease, opacity 0.2s ease;

  --toast-hidden: calc(min(max(0, var(--toast-index) - 2), 1));
}

.toast-container:not(:hover, :focus-within)
  .toast[data-toast-even]:not([data-top]) {
  animation: slide-up-even 0.2s ease-out;
}

.toast-container:not(:hover, :focus-within)
  .toast[data-toast-odd]:not([data-top]) {
  animation: slide-up-odd 0.2s ease-out;
}

@keyframes slide-up-even {
  from {
    transform: translateY(0.5rem)
      scale(
        calc(100% - var(--toast-index) * 5%),
        calc(100% - var(--toast-index) * 2%)
      );
  }

  to {
    transform: translateY(0)
      scale(
        calc(100% - var(--toast-index) * 5%),
        calc(100% - var(--toast-index) * 2%)
      );
  }
}

@keyframes slide-up-odd {
  from {
    transform: translateY(0.5rem)
      scale(
        calc(100% - var(--toast-index) * 5%),
        calc(100% - var(--toast-index) * 2%)
      );
  }

  to {
    transform: translateY(0)
      scale(
        calc(100% - var(--toast-index) * 5%),
        calc(100% - var(--toast-index) * 2%)
      );
  }
}

.toast[data-top] {
  animation: slide-in 0.2s ease-out;
}

.toast-container:hover .toast[data-top],
.toast-container:focus-within .toast[data-top] {
  animation: slide-in 0 ease-out;
}

@keyframes slide-in {
  from {
    opacity: 0;
    transform: translateY(100%)
      scale(
        calc(110% - var(--toast-index) * 5%),
        calc(110% - var(--toast-index) * 2%)
      );
  }

  to {
    opacity: 1;
    transform: translateY(0)
      scale(
        calc(100% - var(--toast-index) * 5%),
        calc(100% - var(--toast-index) * 2%)
      );
  }
}

.toast-container:hover .toast,
.toast-container:focus-within .toast {
  margin-top: var(--toast-padding);
  filter: brightness(1);
  opacity: 1;
  transform: scale(calc(100%));
}

.toast[data-type="success"] {
  background-color: var(--success-background-color);
  color: var(--success-text-color);
}

.toast[data-type="error"] {
  background-color: var(--error-background-color);
  color: var(--error-text-color);
}

.toast[data-type="warning"] {
  background-color: var(--warning-background-color);
  color: var(--warning-text-color);
}

.toast[data-type="info"] {
  background-color: var(--info-background-color);
  color: var(--info-text-color);
}

.toast-content {
  flex: 1;
  margin-right: 8px;
  transition: filter 0.2s ease;
}

.toast-title {
  margin-bottom: 4px;
  color: var(--text-color);
  font-weight: 600;
}

.toast-description {
  color: var(--dim-text-color);
  font-size: 0.875rem;
}

.toast-close {
  align-self: flex-start;
  padding: 0;
  border: none;
  margin: 0;
  background: none;
  color: var(--dim-text-color);
  cursor: pointer;
  font-size: 18px;
  line-height: 1;
}

.toast-close:hover {
  color: var(--bright-text-color);
}

.toast-trigger {
  padding: 8px 18px;
  border: 1px solid var(--dim-border-color);
  border-radius: 0.5rem;
  background-color: var(--light, var(--background-color))
    var(--dark, var(--dim-background-color));
  color: var(--text-color);
  cursor: pointer;
  font-size: 1rem;
  transition: all 0.2s ease;
}

.toast-trigger:hover {
  background-color: var(--hover-background-color);
}

.toast-trigger:focus-visible {
  box-shadow: 0 0 0 2px var(--focused-border-color);
}
